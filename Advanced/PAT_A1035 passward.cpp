/*
1035. Password (20)
时间限制：400ms  内存限制：64MB  代码长度限制：16KB

Description:
To prepare for PAT, the judge sometimes has to generate random passwords for the users. The problem is that there are always some confusing passwords since it is hard to distinguish 1 (one) from l (L in lowercase), or 0 (zero) from O (o in uppercase). One solution is to replace 1 (one) by @, 0 (zero) by %, l by L, and O by o. Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.

Input Specification:
Each input file contains one test case. Each case contains a positive integer N (<= 1000), followed by N lines of accounts. Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.

Output Specification:
For each test case, first print the number M of accounts that have been modified, then print in the following M lines the modified accounts info, that is, the user names and the corresponding modified passwords. The accounts must be printed in the same order as they are read in. If no account is modified, print in one line "There are N accounts and no account is modified" where N is the total number of accounts. However, if N is one, you must print "There is 1 account and no account is modified" instead.

Sample Input 1:
3
Team000002 Rlsp0dfa
Team000003 perfectpwd
Team000001 R1spOdfa

Sample Output 1:
2
Team000002 RLsp%dfa
Team000001 R@spodfa

Sample Input 2:
1
team110 abcdefg332

Sample Output 2:
There is 1 account and no account is modified

Sample Input 3:
2
team110 abcdefg222
team220 abcdefg333

Sample Output 3:
There are 2 accounts and no account is modified
 */



#include <cstdio>

struct user_info {
	char name[15]; // 用户名 
	char pswd[15]; // 密码 
};

const int maxn = 1010;
user_info user[maxn]; // 用户结构体数组 

// 字符替换 
char replace(char c) 
{
	switch (c) {
	case '1': return '@'; break;
	case '0': return '%'; break;
	case 'l': return 'L'; break;
	case 'O': return 'o'; break;
	}
}

int main()
{
	int n;
	scanf("%d", &n); // n个用户 
	
	int index[maxn], m = 0; // index记录替换用户的下标，m为替换用户个数 
	for (int i = 0; i < n; i++) {
		scanf("%s %s", user[i].name, user[i].pswd); // 输入用户名、密码 
		
		bool flag = false; // 用户是否替换，false未替换，true已替换 
		for (int j = 0; user[i].pswd[j] != '\0'; j++) { 
			// 遍历用户密码信息，遇到特殊字符则替换 
			if (user[i].pswd[j] == '1' || user[i].pswd[j] == '0'
				|| user[i].pswd[j] == 'l' || user[i].pswd[j] == 'O') {
				user[i].pswd[j] = replace(user[i].pswd[j]); // 替换 
				flag = true; // 替换标志置为true 
			} else continue; // 非特殊字符跳过 
		}
		
		if (flag) index[m++] = i; // 若替换，记录下标，替换用户数加1 
	}
	
	if (m) { // 替换用户数大于0 
		printf("%d\n", m); // 输出替换数 
		for (int i = 0; i < m; i++) { // 输出各替换用户的用户名和密码 
			printf("%s %s\n", user[index[i]].name, user[index[i]].pswd);
		}
	} else { // 为0，无用户被替换 
		if (n == 1) // 只有一个用户 
			printf("There is 1 account and no account is modified\n");
		else // 两个及以上用户 
			printf("There are %d accounts and no account is modified\n", n);
	}
	return 0;
}
