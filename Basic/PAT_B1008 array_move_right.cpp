/*
1008. 数组元素循环右移问题 (20)
时间限制：400 ms  内存限制：65536 kB  代码长度限制：8000 B

题目描述：
一个数组A中存有N（N>0）个整数，在不允许使用另外数组的前提下，
将每个整数循环向右移M（M>=0）个位置，
即将A中的数据由（A0 A1……AN-1）变换为（AN-M …… AN-1 A0 A1……AN-M-1）
（最后M个数循环移至最前面的M个位置）。
如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？

输入格式：
每个输入包含一个测试用例，
第1行输入N ( 1<=N<=100)、M（M>=0）；第2行输入N个整数，之间用空格分隔。
输出格式：
在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。
输入样例：
6 2
1 2 3 4 5 6
输出样例：5 6 1 2 3 4
 */



#include <cstdio>

void reverse(int a[], int left, int right);

int main()
{
	int n, m;
	scanf("%d%d", &n, &m);
	
	int a[n];
	for (int i = 0; i < n; i++) { // 输入n个整数 
		scanf("%d", &a[i]);
	}
	
	if (m %= n) { // m不为0且m<n 
		reverse(a, 0, n - 1); // 将整个数组倒置 
		reverse(a, 0, m - 1); // 将0到m-1范围内的元素倒置 
		reverse(a, m, n - 1); // 将m到n-1范围内的元素倒置 
	} 
	
	for (int i = 0; i < n; i++) { // 输出右移处理后的整数序列 
		printf("%d%s", a[i], (i < n - 1) ? " " : ""); // 中间有空格，末尾无空格 
	}
	return 0;
}

void swap(int &a, int &b);

// 倒置数组元素 
void reverse(int a[], int i, int j)
{
	while (i < j) {
		swap(a[i], a[j]);
		i++;
		j--;
	}
}

// 交换两个数的值 
void swap(int &a, int &b)
{
	int temp = a;
	a = b;
	b = temp;
}
